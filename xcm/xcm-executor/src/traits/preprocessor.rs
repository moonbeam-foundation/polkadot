// Copyright 2020 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.

use crate::XcVmRegisters;
use xcm::latest::{Error as XcmError, Instruction};

/// A trait allowing to customize the behavior of the XCM executor by injecting code
/// that will be executed before each instruction, it is a kind of pre-processor.
/// This pre-processor may decide to skip the execution of the instruction by returning Ok(false).
pub trait PreprocessInstruction<Call>: Default + Sized {
	/// Run the pre-processor just before the next XCM instruction.
	/// The XCm executor will execute the instruction normally only if this
	/// function returns `Ok(true)`.
	/// If this function returns `ok(false)` the XCM executor will ignore the
	/// instruction and go to the next one.
	/// If this function returns an error, the XCM executor will consider that
	/// the error was generated by the execution of the instruction (as if the
	/// instruction had failed).
	fn preprocess_instruction(
		&mut self,
		_vm_state: &mut XcVmRegisters<Call>,
		_instr: &mut Instruction<Call>,
	) -> Result<bool, XcmError> {
		Ok(true)
	}
}

impl<Call> PreprocessInstruction<Call> for () {}
